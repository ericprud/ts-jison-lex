// test the lexed token: return FALSE when not a match, otherwise return token
function test_match (match, indexed_rule) {
  var token,
      lines,
      backup;

  if (this.options.backtrack_lexer) {
    // save context
    backup = {
      yylineno: this.yylineno,
      yylloc: {
        first_line: this.yylloc.first_line,
        last_line: this.last_line,
        first_column: this.yylloc.first_column,
        last_column: this.yylloc.last_column
      },
      yytext: this.yytext,
      match: this.match,
      matches: this.matches,
      matched: this.matched,
      yyleng: this.yyleng,
      offset: this.offset,
      _more: this._more,
      _input: this._input,
      yy: this.yy,
      conditionStack: this.conditionStack.slice(0),
      done: this.done
    };
    if (this.options.ranges) {
      backup.yylloc.range = this.yylloc.range.slice(0);
    }
  }

  lines = match[0].match(/(?:\r\n?|\n).*/g);
  if (lines) {
    this.yylineno += lines.length;
  }
  this.yylloc = {
    first_line: this.yylloc.last_line,
    last_line: this.yylineno + 1,
    first_column: this.yylloc.last_column,
    last_column: lines ?
      lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
      this.yylloc.last_column + match[0].length
  };
  this.yytext += match[0];
  this.match += match[0];
  this.matches = match;
  this.yyleng = this.yytext.length;
  if (this.options.ranges) {
    this.yylloc.range = [this.offset, this.offset += this.yyleng];
  }
  this._more = false;
  this._backtrack = false;
  this._input = this._input.slice(match[0].length);
  this.matched += match[0];
  token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
  if (this.done && this._input) {
    this.done = false;
  }
  if (token) {
    return token;
  } else if (this._backtrack) {
    // recover context
    for (var k in backup) {
      this[k] = backup[k];
    }
    return false; // rule action called reject() implying the next rule should be tested instead.
  }
  return false;
}
